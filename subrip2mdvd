#!/usr/bin/env python

import argparse
import re
import io
import sys

ap = argparse.ArgumentParser()
ap.add_argument('-i', '--input-encoding', dest='input_encoding', default='UTF-8')
ap.add_argument('-o', '--output-encoding', dest='output_encoding', default='UTF-8')
ap.add_argument('-l', '--line-endings', dest='line_endings', choices=('CR', 'LF', 'CRLF', 'dos', 'unix', 'mac'), default='unix')
ap.add_argument('-f', '--fps', dest='fps', type=float, default=25.0)
options = ap.parse_args()

stdin = io.open(sys.stdin.fileno(), 'rt', encoding=options.input_encoding)
stdout = io.open(sys.stdout.fileno(), 'wt', encoding=options.output_encoding)
line_endings = dict(
  CR = '\r',
  LF = '\n',
  CRLF = '\r\n',
  dos = '\r\n',
  unix = '\n',
  mac = '\r'
)[options.line_endings]
fps = options.fps

TIMING_RE = re.compile('^(\d\d):(\d\d):(\d\d),(\d\d\d) --> (\d\d):(\d\d):(\d\d),(\d\d\d)$').match
EMPTY_RE = re.compile('^\s*$').match

next_line = stdin.next
lines = []
force_break = False

while True:
    try:
        st_no = int(next_line())
    except StopIteration:
        break
    line = next_line()
    m = TIMING_RE(line)
    if not m:
        raise SyntaxError(line)
    else:
        time_fr = int(m.group(4)) * 0.0001 + int(m.group(3)) + 60 * (int(m.group(2)) + 60 * int(m.group(1)))
        time_to = int(m.group(8)) * 0.0001 + int(m.group(7)) + 60 * (int(m.group(6)) + 60 * int(m.group(5)))
        time_fr = int(time_fr * fps)
        time_to = int(time_to * fps)
    while True:
        try:
            line = next_line()
        except StopIteration:
            line = ''
        if EMPTY_RE(line):
            stdout.write('{%d}{%d}%s%s' % (time_fr, time_to, u'|'.join(lines), line_endings))
            lines = []
            break
        else:
            lines += line.strip(),

# vim:ts=4 sts=4 sw=4 et
